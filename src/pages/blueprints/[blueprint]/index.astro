---
import { Image } from 'astro:assets';
import blueprints from '../../../assets/blueprints.json';
import blueprintsImages from '../../../assets/blueprints_images.json';
import Layout from '../../../layouts/Layout.astro';
import { getObjectInfo } from '../../../assets/PsHomeDatabase';
import pathwin32 from 'node:path/win32';

export async function getStaticPaths() {
    return blueprints.map(blueprint => ({
        params: { blueprint },
    }))
}

const localBlueprintImages = Object.entries(blueprintsImages)
    .filter(([k, v]) => k.startsWith(`${Astro.params.blueprint}\\`))
    .filter(([k, v]) =>
        !k.includes('SHARED') &&
        !k.includes('FEATURES') &&
        !k.includes('EXTERIOR'))
    .map(([k, v]) => ({
        filePath: k,
        url: v,
        itemType: pathwin32.basename(pathwin32.dirname(pathwin32.dirname(k))),
        itemName: pathwin32.basename(k, '.png'),
    }));

const groupedBlueprintImages = Object.groupBy(localBlueprintImages, e => e.itemType);

const object = getObjectInfo(Astro.params.blueprint);

if (!object) {
    throw new Error('No object?!');
}
---

<Layout>
    <h1>{object.niceName}</h1>
    <p>by {object.maker}</p>

    {Object.entries(groupedBlueprintImages)
        .map(([k, v]) => <div>
            <h2><a href={`#head_${k}`}>{k}</a></h2>
        </div>)
    }

    {Object.entries(groupedBlueprintImages)
        .map(([k, v]) => <div>
            <h2 id={`head_${k}`}>{k}</h2>
            {v!.map(e => (
                <div>
                    <h3>{e.itemType}: {e.itemName}</h3> 
                    <p>{<Image src={e.url} alt={k.replace(/\\/g, '/')} inferSize />}</p>
                </div>
            ))}
        </div>
    )}
</Layout>