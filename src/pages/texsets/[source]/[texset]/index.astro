---

import { readdir } from 'node:fs/promises';
import { fileURLToPath } from 'node:url';
import path from 'node:path';
import { assert } from 'node:console';
import { Image } from 'astro:assets';
import Layout from '@/layouts/Layout.astro';
import { getTexset, texsets } from '@/lib/texture-sets';

export function getStaticPaths() {
    const arr = [];

    for (const texset of texsets) {
        arr.push({
            params: { source: texset.source, texset: texset.name },
        });
    }

    return arr;
}

const texset = getTexset(Astro.params.source, Astro.params.texset)!;

const texturesByCategoryArr = texset.categories.toSorted((a, b) => a.name.localeCompare(b.name));

function chunks<T>(arr: T[], size: number): T[][] {
    const res = [];
    for (let i = 0; i < arr.length; i += size) {
        res.push(arr.slice(i, i + size));
    }
    return res;
}

function sections<T>(arr: T[], sections: number): T[][] {
    const lengthPerSection = Math.ceil(arr.length / sections);
    return chunks(arr, lengthPerSection);
}
---

<Layout>
    <h1>{Astro.params.texset}</h1>
    <p>by {Astro.params.source}</p>

    {texturesByCategoryArr
        .map((category) => <div>
            <h2><a href={`#${category.name}`}>{category.name}</a></h2>
        </div>)
    }

    {texturesByCategoryArr.map((category) => <div>
        <h2 id={category.name}>{category.name}</h2>
        
        <div class="row">
            {sections(category.textures, 4).map(chunk => (
                <div class="column">
                    {chunk.map(textureUrl => (
                        <div class="cell">
                            <img
                                class="image"
                                src={`https://wsrv.nl/?url=${encodeURIComponent(textureUrl)}`}
                                alt={textureUrl.slice('public\\'.length)}
                                loading="lazy"
                                decoding="async"
                                />
                        </div>
                    ))}
                </div>
            ))}
        </div>
    </div>)}
</Layout>

<style>
.row {
    display: flex;
    flex-wrap: wrap;
    padding: 0 4px;
}

.column {
    flex: 25%;
    padding: 0 4px;
}

.column img {
    margin-top: 8px;
    vertical-align: middle;
}

.cell {
    text-align: center;
}

.image {
    height: 350px;
}
</style>